package com.capgemini.chess.generated.entities;
// Generated Aug 25, 2016 9:00:51 AM by Hibernate Tools 4.3.1.Final

import java.util.Date;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import com.capgemini.chess.dataaccess.enums.ChallengeStatus;

/**
 * Challenge generated by hbm2java
 */
@Entity
@Table(name = "challenge")
public class ChallengeEntity extends BasicEntity implements java.io.Serializable {

	private static final long serialVersionUID = 1L;

	private GameEntity game;
	private PlayerEntity sender;
	private PlayerEntity receiver;
	private Date startDate;
	private Date endDate;
	private ChallengeStatus status;

	public ChallengeEntity() {
	}

	public ChallengeEntity(GameEntity game, PlayerEntity receiver, PlayerEntity sender, Date endDate, Date startDate, ChallengeStatus status) {
		super();
		this.game = game;
		this.receiver = receiver;
		this.sender = sender;
		this.endDate = endDate;
		this.startDate = startDate;
		this.status = status;
	}

	@OneToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "game_id", nullable = true)
	public GameEntity getGame() {
		return this.game;
	}

	public void setGame(GameEntity game) {
		this.game = game;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "receiver_id", nullable = false)
	public PlayerEntity getReceiver() {
		return this.receiver;
	}

	public void setReceiver(PlayerEntity receiver) {
		this.receiver = receiver;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "sender_id", nullable = false)
	public PlayerEntity getSender() {
		return this.sender;
	}

	public void setSender(PlayerEntity sender) {
		this.sender = sender;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "end_date", nullable = false, length = 19)
	public Date getEndDate() {
		return this.endDate;
	}

	public void setEndDate(Date endDate) {
		this.endDate = endDate;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "start_date", nullable = false, length = 19)
	public Date getStartDate() {
		return this.startDate;
	}

	public void setStartDate(Date startDate) {
		this.startDate = startDate;
	}

	@Column(name = "status", nullable = false, length = 14)
	@Enumerated(EnumType.STRING)
	public ChallengeStatus getStatus() {
		return this.status;
	}

	public void setStatus(ChallengeStatus status) {
		this.status = status;
	}

	@Override
	public String toString() {
		return "ChallengeEntity [game=" + game + ", receiver=" + receiver + ", sender=" + sender + ", endDate="
				+ endDate + ", startDate=" + startDate + ", status=" + status + "]";
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((endDate == null) ? 0 : endDate.hashCode());
		result = prime * result + ((game == null) ? 0 : game.hashCode());
		result = prime * result + ((receiver == null) ? 0 : receiver.hashCode());
		result = prime * result + ((sender == null) ? 0 : sender.hashCode());
		result = prime * result + ((startDate == null) ? 0 : startDate.hashCode());
		result = prime * result + ((status == null) ? 0 : status.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		ChallengeEntity other = (ChallengeEntity) obj;
		if (endDate == null) {
			if (other.endDate != null)
				return false;
		} else if (!endDate.equals(other.endDate))
			return false;
		if (game == null) {
			if (other.game != null)
				return false;
		} else if (!game.equals(other.game))
			return false;
		if (receiver == null) {
			if (other.receiver != null)
				return false;
		} else if (!receiver.equals(other.receiver))
			return false;
		if (sender == null) {
			if (other.sender != null)
				return false;
		} else if (!sender.equals(other.sender))
			return false;
		if (startDate == null) {
			if (other.startDate != null)
				return false;
		} else if (!startDate.equals(other.startDate))
			return false;
		if (status != other.status)
			return false;
		return true;
	}

}
